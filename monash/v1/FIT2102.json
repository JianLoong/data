{"preqs":"FIT1008","creditPoints":6,"rules":[{"startDate":"1/01/2016","status":"ACTIVE","ruleSummary":"PREREQ-IW","ruleString":"Must have passed 1 (I/W) units in {FIT1008} with grades other than {STANDARD-DEF, STANDARD-NS}","endDate":""}],"locationAndTime":[{"location":"Clayton","time":["Second semester 2017 (Day)"]},{"location":"Malaysia","time":["Second semester 2017 (Day)"]}],"enjoyScore":3,"learnScore":3,"learnResponse":0,"proh":"","scaBand":2,"unitName":"Programming paradigms","description":"Ability to code in differently constructed programming languages is analogous to speaking in different natural languages with varying grammars. Similar to natural languages, programming languages from different paradigms (styles) vary in their expressiveness and efficiency. One programming language may require many screens-full of complex code to accomplish a task for which another requires but a few expressive lines of code. Therefore, understanding the design principles of programming languages enables computational problems to be implemented in drastically different and powerful ways; leading, in some cases, to solutions that are more elegant, correct, maintainable, efficient and/or extensible.This unit examines a selection of programming languages and paradigms and explores the evolution of language design from low-level paradigms that are closer to the execution model of the machine, to more high-level declarative paradigms that allow programmers to model a problem precisely rather than specify its solution. The unit covers paradigms such as functional and logic programming, comparing and contrasting them to programming styles that students are already familiar with, including object-oriented, imperative and procedural programming paradigms. Topics include specification and data-modeling techniques (covering types and polymorphism, mutability-versus-purity, state management, and side-effects) and different models of execution such as strict-versus-lazy evaluation.The unit provides practical experience with a variety of non-procedural, non-object-oriented programming languages and discusses the influence of programming language theory on the design of current main-stream computer languages, and how the theory translates to practice.","enjoyResponse":0,"faculty":"Faculty of Information Technology","unitCode":"FIT2102","eftsl":0.125}